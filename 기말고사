15. RNN과 CNN을 사용한 시퀀스 처리 
- RNN개념과 WaveNet 구현
  1. 순환 뉴런과 순환층
      순환 신경망은 피드포워드 신경망과 매우 비슷하지만 뒤족으로 순환하는 연결도 O - 다른 점
        ex) 입력을 받아 출력을 만들고 자신에게도 출려긍ㄹ 보내는 뉴런 하나로 구성된 가장 간단한 RNN
      각 타임 스텝(time step t) 또는 프레임(frame) 마다 이 순환 뉴런 recurrent neuron은 x(t)와 
      이전 타임 스텝의 출력인 y(t-1)을 입력으로 받음. 

    첫 번째 타임 스텝에서는 이전 출력이 없으므로 일반적으로는 0으로 설정
    이 작은 네트워크를 시간을 축으로 하여 표현할 수 O , 이를 시간에 따라 네트워크를 펼쳤다고 표현함.
    (unrolling the network through time)

    순환 뉴런으로 이루어진 층은 쉽게 만들 수 있음
      타입 스텝 t마다 모든 뉴런은 입력 벡터 x(t)와 이전 타임 스텝의 출력 벡터 y(t-1)을 받음.
      입력과 출려기 모두 벡터가 됨. ( 뉴런이 하나일 때는 출력이 스칼라 ) 

    메모리 셀 (memory cell 혹은 간단히 셀)
      타임 스텝에 걸쳐서 어떤 상태를 보존하는 신경망의 구성 요소 

    입력과 출력 시퀀스
      - 시퀀스 투 시퀀스 네트워크 (sequence to sequence network)
      - 시퀀스 투 벡터 네트워크 (sequence to vector network)
      - 벡터 투 시퀀스 네트워크 (vector to sequence network)
      -  인코더 디코더

2. RNN 훈련
    BPTT(backpropagation through time) 전략
      RNN 훈련 기법 - 타임 스텝으로 네트워크를 펼치고(이전에 했던 것처럼) 보통의 역전파를 사용

3. 시계열 예측
    내일 버스와 열차에 탑승할 승객 수를 예측하는 모델
      - 데이터 로드 > 정제 ( 2001년부터의 일일 승객 데이터 )

      import pandas as pd
      from pathlib import Path

      path = Path ("datasets/rideship/CTA_Rideship_Daily_Boarding_Totals.csv")
      df = pd.read_csv(path, parse_dates=["service_date"])
      df.columns = ["date","day_type","bus","rail",""total"] #짧은 이름
      df = df.sort_values("date").set_index("date")
      df = df.drop("total", axis = 1) # total은 단순히 bus+rail이므로 필요 X
      df = df.drop_duplicates()       # 중복 월 삭제 (2011-10rhk 2014-07)

      - csv 파일을 로드 > 열 이름을 짧게 줄이고, 날짜순으로 행 정렬 > total 열과 중복 행을 삭제 
        처음 몇 행만 확인
        일별 버스와 철도 이용 승객 수 
        W - 평일, A - 토요일, U - 공휴일

      >>>> df.head()
                  day_type      bus    rail
      date
      2001-01-01      U         297192  126455
      2001-01-02      W         780827  501952
      2001-01-03      W         824923  536432
      2001-01-04      W         870021  550011
      2001-01-05      w         890426  557917

      2019년 몇 달 동안의 버스와 열차 승객 수 그래프 그리기
        - 다변량 시계열
        - 단변량 시계열
        - 주간 계절성
        - 단순 예측

        단순 예측 결과를 시각화하기 위해 (버스와 열차에 대한) 시계열과 함께 일주일 지연된(오른쪽으로 이동된) 
        시계열을 점선으로 그리기
          -> 차분 - 두 시계열의 차이(시간 t의 값에서 시간 t-7의 값을 뺀 것)

        - 자기상관 시계열
          시계열 시간이 지연된 자기자신과 상관관계를 가질 때
        - 5월 말을 제외하고는 대부분 차이가 매우 작음. >>이때 공휴일 o/x

        실제로 당시 월요일이 메모리얼 데이였기 때문에 주말이 길었으며, 이 열을 사용해 예측을 개선할 수 있지만 
        지금은 그냥 임의로 선택한 2019년 3-5월 3달 동안의 평균 절댓값 오차를 계산
          >> 단순 예측의 MAE는 버스의 경우에서 약 43916명, 열차의 경우 약 42143명

        - 평균 절대 비율 오차
          예측 오차를 타깃값으로 나누기

        - 연간 계절성
          장기간 트렌드를 시각화 - 각 기계열의 12개월 이동 평균 그래프 그리기

        * 12개월 차분 확인
          df_monthly.diff(12)[period].plot(grid=True,maker=".", figsize(8,3))
          plt.show()

        - ARMA 모델
          AR (자기회귀) 
            
    
